# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on: [ workflow_dispatch ]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'
        
    - name: Install poetry
      uses: abatilo/actions-poetry@v2

    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
          
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
          
    - name: Setup PyPI token
      run: poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
      
    - name: Install dependencies
      run: poetry install 

    - name: Run the tests 
      run: poetry run pytest -v

    - name: Print the package information
      run: |
          poetry show -v
          poetry env info -v
      
    - name: Publish package
      run: poetry publish --build -vv

